from docx import Document
from pymongo import MongoClient
import re
from gridfs import GridFS
from docx2pdf import convert
from PyPDF2 import PdfWriter, PdfReader
import subprocess

def mongodb_connect(docker_img_name):
    client = MongoClient('', 27017)
    db = client['Dockerweb']
    dynamic_collection = db['dynamic']

    # Define projection to include or exclude fields
    dynamic_projection = {
        '_id': 0,           # Exclude the '_id' field
        'docker_img' : 1,  # Include 'docker_img' field
        'start_time' : 1,
        'finish_time' : 1,
        'elapsed_time' : 1,
        'root_check' : 1,
        'lsof_detect' : 1,
        'netstat_result' : 1,
        'detected_dict_len' : 1,
    }

    # Retrieve data from the collection with projection
    data = dynamic_collection.find_one({'docker_img':docker_img_name}, dynamic_projection)

    return_data = []

    return_data.append(data['docker_img'])
    return_data.append(data['finish_time'])
    dynamic_elapsed_time = data['elapsed_time']

    return_data.append(data['root_check'])
    return_data.append(data['netstat_result'])
    return_data.append(data['lsof_detect'])
    return_data.append(data['detected_dict_len'])



    static_collection = db['static']
    static_projection = {
        '_id': 0,           # Exclude the '_id' field
        'start_time' : 1,
        'finish_time' : 1,
        'elapsed_time' : 1,
        
        'OUTPUT': 1,  # Include 'OUTPUT' field
    }
    data = static_collection.find_one({'docker_img' : docker_img_name}, static_projection)
    static_data = data

    result = static_data.get('OUTPUT', '')
    split_data = result.split(':')
    unknown = re.sub(r'[^0-9]', '', split_data[2])
    low = re.sub(r'[^0-9]', '', split_data[3])
    medium = re.sub(r'[^0-9]', '', split_data[4])
    high = re.sub(r'[^0-9]', '', split_data[5])
    critical = re.sub(r'[^0-9]', '', split_data[6])

    return_data.append(unknown)
    return_data.append(low)
    return_data.append(medium)
    return_data.append(high)
    return_data.append(critical)
    
    return_data.append(data['start_time'])
    static_elapsed_time = data['elapsed_time']
    return_data.append(str(int(static_elapsed_time) + int(dynamic_elapsed_time)) + 'sec')

    # Close the connection
    client.close()

    return return_data

def convert_pdf(output_filename):
    docx_file = output_filename+".docx"
    pdf_file = output_filename+".pdf"
    subprocess.run(["unoconv", "-f", "pdf", output_filename+".docx"])
    #convert(docx_file, pdf_file)
    print(f"PDF 생성 완료: {output_filename}.pdf")

    #표지 pdf 추가
    cover_pdf = '/home/jagym105/docker_sandbox/report/signage.pdf'
    pdf_writer = PdfWriter()

    with open(cover_pdf, "rb") as cover_file:
        pdf_reader = PdfReader(cover_file)
        for page in pdf_reader.pages:
            pdf_writer.add_page(page)

    with open(output_filename + ".pdf", "rb") as result_file:
        pdf_reader = PdfReader(result_file)
        for page in pdf_reader.pages:
            pdf_writer.add_page(page)

    final_pdf = output_filename + ".pdf"
    with open(final_pdf, "wb") as output_file:
        pdf_writer.write(output_file)

    print(f"최종 PDF 저장 완료: {final_pdf}")


def sanitize_filename(filename):
    return re.sub(r'[\\/]', '_', filename)

def upload_report(output_filename,pdf_name):

    # Connect to MongoDB
    client = MongoClient('mongodb://:27017/')
    database = client['Dockerweb']
    fs = GridFS(database)

    with open(pdf_name, 'rb') as file:
        file_data = file.read()
        
    file_id = fs.put(file_data, filename=output_filename)
    print(f"File uploaded with ID: {file_id}")

    client.close()

def make_report(docker_img_name):
    doc = Document('/home/jagym105/docker_sandbox/report/test.docx')
    return_data = mongodb_connect(docker_img_name)

    sanitized_docker_img = sanitize_filename(docker_img_name)
    
    
    output_filename = f'{sanitized_docker_img}_result.docx'
    filefath = '/home/jagym105/docker_sandbox/report/report_file/' + output_filename

    for i in range(len(doc.tables)):
        target_table = doc.tables[i]
        target_words = ['imagename_text',
                        'finishtime_text',
                        'root_text',
                        'ip_text',
                        'tcp_text',
                        'excute_text',
                        'unknown_text',
                        'low_text',
                        'medium_text',
                        'high_text',
                        'critical_text',
                        'starttime_text',
                        'elapsed_text'
                        
                        ]

        for j in range(len(target_words)):
            for row in target_table.rows:
                for cell in row.cells:
                    
                    if target_words[j] in cell.text:
                        if target_words[j] in ['root_text', 'ip_text', 'tcp_text', 'excute_text']:
                            value = int(return_data[j])
                            detection = '탐지' if value == 1 else '미탐지'
                            cell.text = cell.text.replace(target_words[j], detection)
                        else:
                            cell.text = cell.text.replace(target_words[j], str(return_data[j]))

    doc.save(filefath)
    print(f"Modified document saved as {output_filename}")
    
    
    filename = '/home/jagym105/docker_sandbox/report/report_file/'+f'{sanitized_docker_img}_result'
    
    
    convert_pdf(filename)
    pdf_name = filename + '.pdf'
    
    rename = f'{sanitized_docker_img}_result.pdf'
    upload_report(rename,pdf_name)
    
    
