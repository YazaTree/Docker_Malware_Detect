var createError = require('http-errors');
var express = require('express');
var path = require('path');
//var cookieParser = require('cookie-parser');


var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// port setup
app.set('port', process.env.PORT || 9099);

// mongoose 설정
//app.use(logger('dev'));
const mongoose = require('mongoose')
const morgan = require('morgan')

// DB 연결
const test_db = require('./models/test');

mongoose.connect(
  'mongodb://127.0.0.1:27017',
  {
    dbName: "Dockerweb",
    useNewUrlParser: true,
    useUnifiedTopology: true,
  }
)

const db = mongoose.connection
db.on('error', console.error)
db.once('open', () => {
  console.log('Connected to mongodb Server')
})


// const a = db.collection('dynamic').find()
// console.log(a)

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
//app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));


//정적 분석 결과 출력
app.get('/', indexRouter); 
app.post('/', (req, res) => { //이미지명 분석 요청 들어오면
  const imageName = req.body.search_box;
  //static 컬렉션에서 이미지명 조회
  db.collection('static').findOne({ "docker_img": imageName }, (err, data) => {
    if (err) { //에러 발생
      console.error(err);
      res.status(500).json({ error: 'Internal Server Error' });
    } else {
      if (!data) {
        db.collection('docker_img').findOne({ "ImageName": imageName }, (err, data2) => {
          if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal Server Error' });
          } else { 
            if (!data2) {  //분석 리스트에 이미지명이 없으면
              db.collection('docker_img').insertOne({ ImageName: imageName }, (err, result) => {
                if (err) {
                  console.error(err);
                  res.status(500).json({ error: 'Internal Server Error' });
                } else {
                  //저장
                  console.log('저장이 완료되었습니다.');
                  printDatabase(req, res);
                  res.redirect('/fetch-data?search_box=' + encodeURIComponent(imageName));
                }
              });
            } else {
              //분석리스트에 이미지명 존재
              console.log('이미지명이 분석리스트에 존재합니다.');
              printDatabase(req, res);
              res.redirect('/fetch-data?search_box=' + encodeURIComponent(imageName));
            }
          }
        });
      } else {
        console.log('데이터 확인');
        printDatabase(req, res);
        //dy는 어차피 링크를 통해서 확인하기 때문에 따로 함수 호출 필요 x
        return;
      }
    }
  });
});

//서버에 지속적 요청
app.get('/fetch-data', (req, res) => {
  const imageName = req.query.search_box; // 이미지명 추출

  recursivePrintDb(imageName, res); // 재귀적으로 데이터 확인

  function recursivePrintDb(imageName, res, isFirstCall = true) {
    console.log('함수 호출');
    console.log(imageName);
    if (!isFirstCall) {
      setTimeout(() => {
        console.log('데이터 없음');
        console.log(imageName);
        recursivePrintDb(imageName, res, false); // 재귀적으로 호출하여 일정 시간마다 데이터 확인
      }, 10000); // 10초마다 요청
      return;
    }
    db.collection('static').findOne({ docker_img: imageName }, (err, result) => {
      if (err) {
        console.error(err);
        res.status(500).json({ error: 'Internal Server Error' });
      } else {
        if (result) {
          console.log('데이터 확인');
          res.render('result_st', { result: result });
          return;
          
        } else {
          setTimeout(() => {
            console.log('데이터 없음');
            console.log(imageName);
            recursivePrintDb(imageName, res, false); // 재귀적으로 호출하여 일정 시간마다 데이터 확인
          }, 10000); // 10초마다 요청
        }
      }
    });
    
  }
});



//result_st에서 재요청 했을 때
app.get('/result_st', async (req, res) => {
  console.log('이미지명전송');
  const imageName2 = req.query.img_name; // 이미지명 추출
  //값이 req.body.search_box 가 아니라 함수호출 못 함.
  try {
    const result = await db.collection('static').findOne({ docker_img: imageName2 });
    if (result) {
      console.log(result);
      res.render('result_st', { result: result });
    } else {
      res.render('error'); // 데이터가 없을 경우 에러 처리
    }
  } catch (error) {
    console.error(error);
    res.render('error');
  }
});

app.get('/result_dy', async (req, res) => {
  console.log('이미지명전송');
  const imageName2 = req.query.img_name; // 이미지명 추출
  //값이 req.body.search_box 가 아니라 함수 호출 못 함.
  try {
    const result = await db.collection('dynamic').findOne({ docker_img: imageName2 });
    if (result) {
      console.log(result);
      res.render('result_dy', { result: result }); //성공 시 결과 반환
    } else {
      res.redirect('/non.html'); //데이터 없을 시 알림창 페이지 반환
    }
  } catch (error) {
    console.error(error);
    res.redirect('/non.html');
  }
});

//db 출력 함수
async function printDatabase(req, res) {
  try {
    console.log('호출성공');
    db.collection('static').findOne({ docker_img : req.body.search_box }, (err, result) => {
      if (err) {
        console.error(err);
        res.render('error'); // 에러 발생 시 error.ejs 렌더링
      } else {
        if(result){
          console.log(result);
          res.render('result_st', { result: result });
          return; 
        } // result.ejs 렌더링 시 result 데이터 전달
        else{
          setTimeout(() =>{
            printDatabase(req,res);
          }, 5000);
        }
      }
    });
  } catch (error) {
    console.error(error);
  }
}

// db 출력 끝
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function (req, res, next) {

    next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});



module.exports = app;

var server = app.listen(app.get('port'), function () {

  console.log('Express server listening on port ' + server.address().port);

});